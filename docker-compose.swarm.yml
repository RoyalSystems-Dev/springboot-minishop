version: '3.8'

services:
  # ========================================
  # NATS Server (Message Broker) - Instancia dedicada para Mini-Shop
  # ========================================
  nats-server:
    image: nats:2.10-alpine
    ports:
      - "8422:4222"      # NATS Client Port (puerto externo 8422)
      - "8423:8222"      # HTTP Monitoring Port (puerto externo 8423)
      - "8424:6222"      # Cluster Port (puerto externo 8424)
    command: 
      - "--http_port"
      - "8222"
      - "--name"
      - "mini-shop-nats-dedicated"
      - "--server_name"
      - "mini-shop-instance"
    environment:
      - NATS_CLUSTER_LISTEN=0.0.0.0:6222
      - NATS_CLUSTER_ADVERTISE=${DOCKER_SWARM_IP:-10.0.1.14}:6222
    volumes:
      - nats_data:/data
    networks:
      - mini-shop-network
    # 游댠 CONFIGURACI칍N PARA SWARM
    deploy:
      replicas: 3                    # 3 instancias de NATS
      placement:
        constraints:
          - node.role == manager     # Solo en nodos manager
        preferences:
          - spread: node.id          # Distribuir en diferentes nodos
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1              # Actualizar de a 1 por vez
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      labels:
        - "service.name=nats-server"
        - "service.version=2.10"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ========================================
  # Orders Service
  # ========================================
  orders-service:
    build:
      context: ./orders-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-swarm
      - JAVA_OPTS=-Xmx512m -Xms256m
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
    volumes:
      - ./orders-service/config:/app/config:ro
    networks:
      - mini-shop-network
    # 游댠 CONFIGURACI칍N PARA SWARM
    deploy:
      replicas: 4                    # 4 instancias del servicio
      placement:
        constraints:
          - node.role == worker      # Solo en nodos worker
        preferences:
          - spread: node.labels.zone # Distribuir por zonas si est치n etiquetadas
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 2              # Actualizar de a 2 por vez
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
      labels:
        - "service.name=orders-service"
        - "service.type=api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================================
  # Products Service
  # ========================================
  products-service:
    build:
      context: ./products-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-swarm
      - JAVA_OPTS=-Xmx512m -Xms256m
    volumes:
      - ./products-service/config:/app/config:ro
    networks:
      - mini-shop-network
    # 游댠 CONFIGURACI칍N PARA SWARM
    deploy:
      replicas: 3                    # 3 instancias del servicio
      placement:
        constraints:
          - node.role == worker      # Solo en nodos worker
          - node.labels.type != database  # No en nodos marcados como database
        preferences:
          - spread: node.id          # Distribuir en diferentes nodos
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      resources:
        limits:
          cpus: '0.8'
          memory: 768M
        reservations:
          cpus: '0.4'
          memory: 384M
      labels:
        - "service.name=products-service"
        - "service.type=api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================================
  # Notifications Service
  # ========================================
  notifications-service:
    build:
      context: ./notifications-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker-swarm
      - JAVA_OPTS=-Xmx512m -Xms256m
    volumes:
      - ./notifications-service/config:/app/config:ro
    networks:
      - mini-shop-network
    # 游댠 CONFIGURACI칍N PARA SWARM
    deploy:
      replicas: 2                    # 2 instancias del servicio
      placement:
        constraints:
          - node.role == worker      # Solo en nodos worker
        preferences:
          - spread: node.id          # Distribuir en diferentes nodos
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      labels:
        - "service.name=notifications-service"
        - "service.type=api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================================
  # Nginx (Reverse Proxy y Load Balancer)
  # ========================================
  nginx:
    image: nginx:alpine
    ports:
      - "8088:80"  # Puerto f치cil de cambiar
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/html:/usr/share/nginx/html     # Para p치gina est치tica
      - ./nginx/proxy_params:/etc/nginx/proxy_params
    networks:
      - mini-shop-network
    # 游댠 CONFIGURACI칍N PARA SWARM
    deploy:
      replicas: 2                    # 2 instancias de Nginx
      placement:
        constraints:
          - node.role == manager     # Solo en nodos manager (entrada al cluster)
        preferences:
          - spread: node.id          # Distribuir en diferentes managers
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      labels:
        - "service.name=nginx"
        - "service.type=proxy"

# ========================================
# Networks - Para Swarm usa overlay
# ========================================
networks:
  mini-shop-network:
    driver: overlay                  # Cambiar de bridge a overlay para Swarm
    name: mini-shop-net
    attachable: true
    ipam:
      config:
        - subnet: 10.0.9.0/24

# ========================================
# Volumes
# ========================================
volumes:
  nats_data:
    name: mini-shop-nats-data
  nginx_logs:
    name: mini-shop-nginx-logs
